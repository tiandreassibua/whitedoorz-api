// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(50)
  lastName  String   @db.VarChar(50)
  email     String   @unique @db.VarChar(50)
  password  String   @db.VarChar(200)
  phone     String   @db.VarChar(30)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review      Review[]
  wishlist    Wishlist[]
  transaction Transaction[]

  @@map("users")
}

model Wishlist {
  id         Int      @id @default(autoincrement())
  userId     Int
  propertyId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
  @@map("wishlists")
}

model Property {
  id          Int      @id @default(autoincrement())
  slug        String   @unique @db.VarChar(255)
  name        String   @db.VarChar(150)
  address     String   @db.VarChar(150)
  city        String   @db.VarChar(50)
  image       String   @db.Text
  location    String   @db.Text
  rating      Float    @default(0.0) @db.Double()
  description String   @db.Text
  category    Category
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rooms       Room[]
  review      Review[]
  wishlist    Wishlist[]
  transaction Transaction[]

  @@map("properties")
}

enum Category {
  hotel
  apartment
}

model Room {
  id         Int      @id @default(autoincrement())
  propertyId Int
  image      String   @db.Text
  name       String   @db.VarChar(150)
  price      Int      @default(0) @db.Int
  maxPeople  Int      @default(1) @db.Int
  bedQty     Int      @default(1) @db.Int
  available  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  transactionRoom TransactionRoom[]
  property        Property          @relation(fields: [propertyId], references: [id])

  @@map("rooms")
}

model Review {
  id         Int      @id @default(autoincrement())
  userId     Int
  propertyId Int
  body       String   @db.Text
  rating     Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@map("reviews")
}

model Transaction {
  id           String   @id @default(uuid())
  userId       Int
  propertyId   Int
  checkIn      DateTime
  checkOut     DateTime
  totalPrice   Int      @default(0) @db.Int
  status       Status   @default(created)
  redirect_url String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  transactionRoom TransactionRoom[]
  user            User              @relation(fields: [userId], references: [id])
  property        Property          @relation(fields: [propertyId], references: [id])

  @@map("transactions")
}

enum Status {
  created
  pending
  challenge
  success
  failed
}

model TransactionRoom {
  id            Int      @id @default(autoincrement())
  transactionId String
  roomId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [id])
  room        Room        @relation(fields: [roomId], references: [id])

  @@map("transaction_rooms")
}
